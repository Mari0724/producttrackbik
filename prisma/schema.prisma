generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  idUsuario      Int       @id @default(autoincrement())
  username       String    @unique
  correo         String    @unique
  password       String
  nombreCompleto String
  telefono       String
  direccion      String
  fotoPerfil     String?

  // Campos opcionales porque solo aplican a EMPRESARIAL
  nombreEmpresa   String?
  nit             String?   @unique
  estado          String
  rol             String
  tipoUsuario     TipoUsuario? @default(INDIVIDUAL) // Se conserva el default
  rolEquipo       rolEquipo?
  perfilCompleto  Boolean   @default(false)

  empresaId       Int?
  jefe            users?     @relation("EmpresaMiembros", fields: [empresaId], references: [idUsuario])
  miembros        users[]    @relation("EmpresaMiembros")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  // Relaciones
  passwordResets   passwordReset[]
  notificaciones   notificaciones[]
  productos        productos[]
  comentarios      comentarios[]
  nutriScans       NutriScan[]
  histInv          histInv[]
  preferencias     preferenciasNotificaciones?
}

model passwordReset {
  idSeguridad      Int      @id @default(autoincrement())
  idUsuario        Int
  token            String
  fechaSolicitud   DateTime
  fechaExpiracion  DateTime
  usado            Boolean   @default(false)

  user             users     @relation(fields: [idUsuario], references: [idUsuario])
}

model notificaciones {
  idNotificacion Int              @id @default(autoincrement())
  idUsuario      Int
  tipo           TipoNotificacion
  titulo         String
  mensaje        String
  fechaEnvio     DateTime         @default(now())
  leida          Boolean          @default(false)
  user           users            @relation(fields: [idUsuario], references: [idUsuario])
}

model preferenciasNotificaciones {
  id                 Int    @id @default(autoincrement())
  idUsuario          Int    @unique
  stockBajo          Boolean @default(true)
  productoVencido    Boolean @default(true)
  comentarios        Boolean @default(true)
  reposicion         Boolean @default(true)
  actualizacion      Boolean @default(true)
  user               users  @relation(fields: [idUsuario], references: [idUsuario])
}

model productos {
  id               Int              @id @default(autoincrement())
  codigoBarras     String?           @unique
  codigoQR         String?           @unique
  nombre           String
  descripcion      String
  precio           Decimal
  cantidad         Int
  fechaAdquisicion DateTime
  fechaVencimiento DateTime
  usuarioId        Int
  estado           EstadoProducto
  imagen           String
  categoria        String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  eliminadoEn      DateTime?
  histInv          histInv[]
  usuario          users            @relation(fields: [usuarioId], references: [idUsuario])
  recorStock       recorStock[]
  comentarios      comentarios[]
}

model recorStock {
  idRecordatorio    Int                @id @default(autoincrement())
  productoId        Int
  cantidadMinima    Int
  fechaRecordatorio DateTime
  estado            EstadoRecordatorio
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  producto          productos          @relation(fields: [productoId], references: [id])
}

model comentarios {
  idComentario    Int              @id @default(autoincrement())
  idUsuario       Int
  idProducto      Int
  comentario      String
  fechaComentario DateTime
  estado          EstadoComentario
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            users            @relation(fields: [idUsuario], references: [idUsuario])
  producto        productos        @relation(fields: [idProducto], references: [id])
}

model NutriScan {
  id            Int      @id @default(autoincrement())
  usuarioId     Int
  esAlimento    Boolean              // Se identificó como alimento o no
  consulta      String               // Texto extraído por OCR
  respuesta     Json                 // Resumen generado por GPT
  tipoAnalisis  String               // "ocr-openfoodfacts-gpt" o "ocr-gpt-only"
  fechaAnalisis DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  isTest         Boolean   @default(false)

  usuario users @relation(fields: [usuarioId], references: [idUsuario])
}

model histInv {
  id                Int             @id @default(autoincrement())
  productoId        Int
  usuarioId         Int
  accion            AccionHistorial
  cantidad_anterior Int
  cantidad_nueva    Int
  precio_anterior   Decimal
  precio_nuevo      Decimal
  fechaCambio       DateTime
  producto          productos       @relation(fields: [productoId], references: [id])
  usuario           users           @relation(fields: [usuarioId], references: [idUsuario])
}

enum TipoUsuario {
  INDIVIDUAL
  EMPRESARIAL
}

enum rol {
  USUARIO // individual o empresa
  EQUIPO // miembro del equipo de una empresa
  ADMIN // administrador del sistema
  DESARROLLADOR
}

enum rolEquipo {
  LECTOR
  COMENTARISTA
  EDITOR
}

enum EstadoProducto {
  DISPONIBLE
  AGOTADO
  RESERVADO
  VENCIDO
  ELIMINADO
}

enum TipoNotificacion {
  STOCK_BAJO
  PRODUCTO_VENCIDO
  ACTUALIZACION_APP
  COMENTARIO_EQUIPO
  REPOSICION_RECOMENDADA
  PRODUCTO_POR_VENCER
  RECOMENDACION
}

enum EstadoRecordatorio {
  PENDIENTE
  ENVIADO
  CANCELADO
}

enum EstadoComentario {
  pendiente
  revisado
}

enum AccionHistorial {
  agregado
  modificado
  eliminado
}