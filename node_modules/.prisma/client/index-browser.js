
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  idUsuario: 'idUsuario',
  username: 'username',
  correo: 'correo',
  password: 'password',
  nombreCompleto: 'nombreCompleto',
  telefono: 'telefono',
  direccion: 'direccion',
  fotoPerfil: 'fotoPerfil',
  nombreEmpresa: 'nombreEmpresa',
  nit: 'nit',
  estado: 'estado',
  rol: 'rol',
  tipoUsuario: 'tipoUsuario',
  rolEquipo: 'rolEquipo',
  perfilCompleto: 'perfilCompleto',
  empresaId: 'empresaId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PasswordResetScalarFieldEnum = {
  idSeguridad: 'idSeguridad',
  idUsuario: 'idUsuario',
  token: 'token',
  fechaSolicitud: 'fechaSolicitud',
  fechaExpiracion: 'fechaExpiracion',
  usado: 'usado'
};

exports.Prisma.NotificacionesScalarFieldEnum = {
  idNotificacion: 'idNotificacion',
  idUsuario: 'idUsuario',
  tipo: 'tipo',
  titulo: 'titulo',
  mensaje: 'mensaje',
  fechaEnvio: 'fechaEnvio',
  leida: 'leida'
};

exports.Prisma.PreferenciasNotificacionesScalarFieldEnum = {
  id: 'id',
  idUsuario: 'idUsuario',
  stockBajo: 'stockBajo',
  productoVencido: 'productoVencido',
  comentarios: 'comentarios',
  reposicion: 'reposicion',
  actualizacion: 'actualizacion'
};

exports.Prisma.ProductosScalarFieldEnum = {
  id: 'id',
  codigoBarras: 'codigoBarras',
  codigoQR: 'codigoQR',
  nombre: 'nombre',
  descripcion: 'descripcion',
  precio: 'precio',
  cantidad: 'cantidad',
  fechaAdquisicion: 'fechaAdquisicion',
  fechaVencimiento: 'fechaVencimiento',
  usuarioId: 'usuarioId',
  estado: 'estado',
  imagen: 'imagen',
  categoria: 'categoria',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  eliminadoEn: 'eliminadoEn'
};

exports.Prisma.RecorStockScalarFieldEnum = {
  idRecordatorio: 'idRecordatorio',
  productoId: 'productoId',
  cantidadMinima: 'cantidadMinima',
  fechaRecordatorio: 'fechaRecordatorio',
  estado: 'estado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComentariosScalarFieldEnum = {
  idComentario: 'idComentario',
  idUsuario: 'idUsuario',
  idProducto: 'idProducto',
  comentario: 'comentario',
  fechaComentario: 'fechaComentario',
  estado: 'estado',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NutriScanScalarFieldEnum = {
  id: 'id',
  usuarioId: 'usuarioId',
  esAlimento: 'esAlimento',
  consulta: 'consulta',
  respuesta: 'respuesta',
  tipoAnalisis: 'tipoAnalisis',
  fechaAnalisis: 'fechaAnalisis',
  actualizadoEn: 'actualizadoEn',
  isTest: 'isTest'
};

exports.Prisma.HistInvScalarFieldEnum = {
  id: 'id',
  productoId: 'productoId',
  usuarioId: 'usuarioId',
  accion: 'accion',
  cantidad_anterior: 'cantidad_anterior',
  cantidad_nueva: 'cantidad_nueva',
  precio_anterior: 'precio_anterior',
  precio_nuevo: 'precio_nuevo',
  fechaCambio: 'fechaCambio'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.TipoUsuario = exports.$Enums.TipoUsuario = {
  INDIVIDUAL: 'INDIVIDUAL',
  EMPRESARIAL: 'EMPRESARIAL'
};

exports.rolEquipo = exports.$Enums.rolEquipo = {
  LECTOR: 'LECTOR',
  COMENTARISTA: 'COMENTARISTA',
  EDITOR: 'EDITOR'
};

exports.TipoNotificacion = exports.$Enums.TipoNotificacion = {
  STOCK_BAJO: 'STOCK_BAJO',
  PRODUCTO_VENCIDO: 'PRODUCTO_VENCIDO',
  ACTUALIZACION_APP: 'ACTUALIZACION_APP',
  COMENTARIO_EQUIPO: 'COMENTARIO_EQUIPO',
  REPOSICION_RECOMENDADA: 'REPOSICION_RECOMENDADA',
  PRODUCTO_POR_VENCER: 'PRODUCTO_POR_VENCER',
  RECOMENDACION: 'RECOMENDACION'
};

exports.EstadoProducto = exports.$Enums.EstadoProducto = {
  DISPONIBLE: 'DISPONIBLE',
  AGOTADO: 'AGOTADO',
  RESERVADO: 'RESERVADO',
  VENCIDO: 'VENCIDO',
  ELIMINADO: 'ELIMINADO'
};

exports.EstadoRecordatorio = exports.$Enums.EstadoRecordatorio = {
  PENDIENTE: 'PENDIENTE',
  ENVIADO: 'ENVIADO',
  CANCELADO: 'CANCELADO'
};

exports.EstadoComentario = exports.$Enums.EstadoComentario = {
  pendiente: 'pendiente',
  revisado: 'revisado'
};

exports.AccionHistorial = exports.$Enums.AccionHistorial = {
  agregado: 'agregado',
  modificado: 'modificado',
  eliminado: 'eliminado'
};

exports.Prisma.ModelName = {
  users: 'users',
  passwordReset: 'passwordReset',
  notificaciones: 'notificaciones',
  preferenciasNotificaciones: 'preferenciasNotificaciones',
  productos: 'productos',
  recorStock: 'recorStock',
  comentarios: 'comentarios',
  NutriScan: 'NutriScan',
  histInv: 'histInv'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
