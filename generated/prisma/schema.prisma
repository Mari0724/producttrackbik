generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  idUsuario        Int                @id @default(autoincrement())
  username         String             @unique
  correo           String             @unique
  password         String
  nombreCompleto   String
  telefono         String
  direccion        String
  fotoPerfil       String
  nombreEmpresa    String?
  nit              String?            @unique
  estado           String
  rol              String
  rolEquipo        rolEquipo?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  deletedAt        DateTime?
  tipoUsuario      TipoUsuario
  MonAudRend       MonAudRend[]
  ajustInven       ajustInven[]
  analisisImagenes analisisImagenes[]
  api_logs         api_logs[]
  auditoria        auditoria[]
  auteRest         auteRest?
  comentarios      comentarios[]
  histInv          histInv[]
  notificaciones   notificaciones[]
  productos        productos[]
  soporte          soporte[]
}

model auteRest {
  idSeguridad     Int      @id @default(autoincrement())
  idUsuario       Int      @unique
  googleId        String   @unique
  token           String
  fechaSolicitud  DateTime
  fechaExpiracion DateTime
  usado           Boolean
  confirmado      Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            users    @relation(fields: [idUsuario], references: [idUsuario])
}

model notificaciones {
  idNotificacion Int              @id @default(autoincrement())
  idUsuario      Int
  tipo           TipoNotificacion
  titulo         String
  mensaje        String
  fechaEnvio     DateTime
  leida          Boolean
  user           users            @relation(fields: [idUsuario], references: [idUsuario])
}

model productos {
  id               Int              @id @default(autoincrement())
  codigoBarras     String           @unique
  codigoQR         String           @unique
  nombre           String
  descripcion      String
  categoriaId      Int
  cantidad         Int
  precio           Decimal
  fechaAdquisicion DateTime
  fechaVencimiento DateTime
  usuarioId        Int
  estado           String
  imagen           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  eliminadoEn      DateTime?
  ajustInven       ajustInven[]
  alertVen         alertVen[]
  colaboraciones   colaboraciones[]
  histInv          histInv[]
  histoVenta       histoVenta[]
  usuario          users            @relation(fields: [usuarioId], references: [idUsuario])
  recorStock       recorStock[]
}

model histoVenta {
  idVenta         Int       @id @default(autoincrement())
  idProducto      Int
  cantidadVendida Int
  fechaVenta      DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  producto        productos @relation(fields: [idProducto], references: [id])
}

model recorStock {
  idRecordatorio    Int                @id @default(autoincrement())
  idProducto        Int
  cantidadMinima    Int
  fechaRecordatorio DateTime
  estado            EstadoRecordatorio
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  producto          productos          @relation(fields: [idProducto], references: [id])
}

model comentarios {
  idComentario    Int              @id @default(autoincrement())
  idUsuario       Int
  comentario      String
  fechaComentario DateTime
  estado          EstadoComentario
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            users            @relation(fields: [idUsuario], references: [idUsuario])
}

model soporte {
  idSoporte   Int           @id @default(autoincrement())
  idUsuario   Int
  asunto      String
  descripcion String
  estado      EstadoSoporte
  respuesta   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        users         @relation(fields: [idUsuario], references: [idUsuario])
}

model ajustInven {
  idAjuste         Int       @id @default(autoincrement())
  idProducto       Int
  idUsuario        Int
  cantidadAnterior Int
  cantidadNueva    Int
  motivo           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  producto         productos @relation(fields: [idProducto], references: [id])
  usuario          users     @relation(fields: [idUsuario], references: [idUsuario])
}

model alertVen {
  idAlerta    Int                @id @default(autoincrement())
  idProducto  Int
  fechaAlerta DateTime
  estado      EstadoRecordatorio
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  producto    productos          @relation(fields: [idProducto], references: [id])
}

model analisisImagenes {
  id            Int      @id @default(autoincrement())
  usuarioId     Int
  esAlimento    Boolean
  consulta      String
  respuesta     Json
  fechaAnalisis DateTime
  usuario       users    @relation(fields: [usuarioId], references: [idUsuario])
}

model colaboraciones {
  id          Int       @id @default(autoincrement())
  productoId  Int
  marca       String
  tarifa      Decimal
  fechaInicio DateTime
  fechaFin    DateTime
  producto    productos @relation(fields: [productoId], references: [id])
}

model histInv {
  id                Int             @id @default(autoincrement())
  productoId        Int
  usuarioId         Int
  accion            AccionHistorial
  cantidad_anterior Int
  cantidad_nueva    Int
  precio_anterior   Decimal
  precio_nuevo      Decimal
  fechaCambio       DateTime
  producto          productos       @relation(fields: [productoId], references: [id])
  usuario           users           @relation(fields: [usuarioId], references: [idUsuario])
}

model api_logs {
  id              Int       @id @default(autoincrement())
  endpoint        String
  metodo          MetodoAPI
  statusCode      Int
  tiempoRespuesta Decimal
  fecha           DateTime
  errorMensaje    String
  usuarioId       Int
  usuario         users     @relation(fields: [usuarioId], references: [idUsuario])
}

model MonAudRend {
  id           Int        @id @default(autoincrement())
  tipoEvento   TipoEvento
  nombreEvento String
  descripcion  String
  usuarioId    Int
  fecha        DateTime
  ip_address   String
  nivel        String
  valor        Decimal
  stackTrace   String
  usuario      users      @relation(fields: [usuarioId], references: [idUsuario])
}

model auditoria {
  id          Int      @id @default(autoincrement())
  evento      String
  usuarioId   Int
  descripcion String
  fecha       DateTime
  usuario     users    @relation(fields: [usuarioId], references: [idUsuario])
}

enum TipoUsuario {
  INDIVIDUAL
  EMPRESARIAL
}

enum rol {
  USUARIO
  EQUIPO
  ADMIN
  DESARROLLADOR
}

enum rolEquipo {
  LECTOR
  COMENTARISTA
  EDITOR
  ADMIN
}

enum TipoNotificacion {
  general
  solicitud
  recomendacion
}

enum EstadoRecordatorio {
  pendiente
  atendido
}

enum EstadoComentario {
  pendiente
  revisado
}

enum EstadoSoporte {
  pendiente
  en_proceso
  resuelto
}

enum AccionHistorial {
  agregado
  modificado
  eliminado
}

enum MetodoAPI {
  GET
  POST
  PUT
  DELETE
}

enum TipoEvento {
  evento
  error
  metrica
}
